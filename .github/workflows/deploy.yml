name: CI/CD Pipeline for Django

on:
  push:
    branches:
      - main  # main 브랜치에 푸시될 때 트리거

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Docker image
        run: |
          docker build -t wanted_market:latest .
          docker tag wanted_market:latest ${{ secrets.DOCKER_USERNAME }}/wanted_market:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/wanted_market:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build  # build job이 완료된 후에 실행

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.EC2_USER }}
          aws-secret-access-key: ${{ secrets.EC2_KEY }}
          aws-region: ap-northeast-2

      - name: Stop existing Docker container (if running)
        run: |
          # Step 1: Execute the command and get the command ID
          COMMAND_ID=$(aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"instanceIds","Values":["i-041c523ce6418a081"]}]' \
            --parameters '{"commands":["docker ps -q -f name=market"]}' \
            --timeout-seconds 600 \
            --max-concurrency "50" \
            --max-errors "0" \
            --query "Command.CommandId" \
            --output text)
          
          # Wait for the command to execute
          sleep 10
          
          # Step 2: Get the command output
          CONTAINER_ID=$(aws ssm get-command-invocation \
            --command-id "$COMMAND_ID" \
            --instance-id "i-041c523ce6418a081" \
            --query "StandardOutputContent" \
            --output text)

          echo "Containor ID : $CONTAINER_ID"
          
          if [ ! -z "$CONTAINER_ID" ]; then
            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets '[{"Key":"instanceIds","Values":["i-041c523ce6418a081"]}]' \
              --parameters "commands=['docker stop $CONTAINER_ID']" \
              --timeout-seconds 600 \
              --max-concurrency "50" \
              --max-errors "0" \
              --output text
            aws ssm send-command \
              --document-name "AWS-RunShellScript" \
              --targets '[{"Key":"instanceIds","Values":["i-041c523ce6418a081"]}]' \
              --parameters "commands=['docker rm $CONTAINER_ID']" \
              --timeout-seconds 600 \
              --max-concurrency "50" \
              --max-errors "0" \
              --output text
          fi

      - name: Transfer Docker image from Docker Hub to EC2 via SSM
        run: |
          aws ssm send-command \
            --document-name "AWS-RunShellScript" \
            --targets '[{"Key":"instanceIds","Values":["i-041c523ce6418a081"]}]' \
            --parameters '{"commands":["docker pull needidcard/wanted_market:latest && docker run -d -p 8080:8000 --name market needidcard/wanted_market:latest"]}' \
            --timeout-seconds 600 \
            --max-concurrency "50" \
            --max-errors "0" \
            --output text

        
